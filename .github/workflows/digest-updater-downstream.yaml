# The aim of this GitHub workflow is to update the .spec.tags[0].from.name field of each Notebook's ImageStreams into Digest format, when cut off a new release (The odh-manifest release branch should exist). 
# The format of the digest that would be assing has the following format: quay.io/opendatahub/workbench-images@sha256:xxx...xxx
on:
  workflow_dispatch:
    inputs:
      branch:
        required: true
        description: "Provide release branch ex rhods-x.xx"
      release-n:
        required: true
        description: "Provide release N version of the notebooks ex 2023a"

jobs:
  initialize:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Install Skopeo CLI
        shell: bash
        run: |
          sudo apt-get -y update
          sudo apt-get -y install skopeo

      # Checkout the release branch 
      - name: Checkout release branch
        uses: actions/checkout@v3
        with:
          ref:  ${{ inputs.branch }}

      # Create a new branch
      - name: Create a new branch
        run: |
         git checkout -b digest-updater
         git push --set-upstream origin digest-updater

  update-n-version:
    needs: [ initialize ]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Configure Git
        run: |
         git config --global user.email "github-actions[bot]@users.noreply.github.com"
         git config --global user.name "GitHub Actions"

      # Get the latest weekly build commit hash: https://github.com/opendatahub-io/notebooks/commits/2023a
      - name: Checkout upstream notebooks repo
        uses: actions/checkout@v3
        with:
         repository: red-hat-data-services/notebooks
         ref: release-${{ inputs.release-n }}
      - name: Retrive latest weekly commit hash from the release branch
        id: hash
        shell: bash
        run: |
          echo "HASH=$(git rev-parse --short HEAD)" >> ${GITHUB_OUTPUT}

      # Checkout the release branch to apply the updates
      - name: Checkout release branch
        uses: actions/checkout@v3
        with:
          ref: digest-updater


      - name: Fetch digest, and update the param.env file
        run: |
              IMAGES=("odh-minimal-notebook-image-n" "odh-minimal-gpu-notebook-image-n" "odh-pytorch-gpu-notebook-image-n")
              REGEXES=("v2-${{ inputs.release-n }}-\d{8}+-${{ steps.hash.outputs.HASH }}" "cuda-[a-z]+-minimal-[a-z0-9]+-[a-z]+-3.9-${{ inputs.release-n }}-\d{8}-${{ steps.hash.outputs.HASH }}" "v2-${{ inputs.release-n }}-\d{8}+-${{ steps.hash.outputs.HASH }}")
            
              for ((i=0;i<${#IMAGES[@]};++i)); do
                image=${IMAGES[$i]}
                echo $image
                regex=${REGEXES[$i]}
                img=$(cat jupyterhub/notebook-images/overlays/additional/params.env | grep -E "${image}=" | cut -d '=' -f2)
                registry=$(echo $img | cut -d '@' -f1)
                latest_tag=$(skopeo inspect docker://$img | jq -r --arg regex "$regex" '.RepoTags | map(select(. | test($regex))) | .[0]')
                digest=$(skopeo inspect docker://$registry:$latest_tag | jq .Digest | tr -d '"')
                output=$registry@$digest
                echo $output
                sed -i "s|^image=.*|image=$output|" jupyterhub/notebook-images/overlays/additional/params.env
              done

              git fetch origin digest-updater && git pull origin digest-updater && git add jupyterhub/notebook-images/overlays/additional/params.env && git commit -m "Update file via digest-updater GitHub action" && git push origin digest-updater


      # - name: Fetch digest, and update the param.env file
      #   run: |

      #     # Updates odh-minimal-notebook-image-n
      #     img_min_n=$(cat jupyterhub/notebook-images/overlays/additional/params.env | grep -E "odh-minimal-notebook-image-n=" | cut -d '=' -f2)
      #     registry_min_n=$(echo $img_min_n | cut -d '@' -f1)
      #     echo $registry_min_n

      #     regex_min_n="v2-${{ inputs.release-n }}-\d{8}+-${{ steps.hash.outputs.HASH }}"
      #     echo $regex_min_n

      #     latest_tag_min_n=$(skopeo inspect docker://$img_min_n | jq -r --arg regex_min_n "$regex_min_n" '.RepoTags | map(select(. | test($regex_min_n))) | .[0]')
      #     digest_min_n=$(skopeo inspect docker://$registry_min_n:$latest_tag_min_n | jq .Digest | tr -d '"')
      #     output_min_n=$registry_min_n@$digest_min_n
      #     echo $output_min_n

      #     sed -i "s|^odh-minimal-notebook-image-n=.*|odh-minimal-notebook-image-n=$output_min_n|" jupyterhub/notebook-images/overlays/additional/params.env

      #     # Updates odh-minimal-gpu-notebook-image-n
      #     img_min_gpu_n=$(cat jupyterhub/notebook-images/overlays/additional/params.env | grep -E "odh-minimal-gpu-notebook-image-n=" | cut -d '=' -f2)
      #     registry_min_gpu_n=$(echo $img_min_gpu_n | cut -d '@' -f1)
      #     echo $registry_min_gpu_n

      #     regex_min_gpu_n="cuda-[a-z]+-minimal-[a-z0-9]+-[a-z]+-3.9-${{ inputs.release-n }}-\d{8}-${{ steps.hash.outputs.HASH }}"
      #     echo $regex_min_gpu_n

      #     latest_tag_min_gpu_n=$(skopeo inspect docker://$img_min_gpu_n | jq -r --arg regex_min_gpu_n "$regex_min_gpu_n" '.RepoTags | map(select(. | test($regex_min_gpu_n))) | .[0]')
      #     digest_min_gpu_n=$(skopeo inspect docker://$registry_min_gpu_n:$latest_tag_min_gpu_n | jq .Digest | tr -d '"')
      #     output_min_gpu_n=$registry_min_gpu_n@$digest_min_gpu_n
      #     echo $output_min_gpu_n

      #     sed -i "s|^odh-minimal-gpu-notebook-image-n=.*|odh-minimal-gpu-notebook-image-n=$output_min_gpu_n|" jupyterhub/notebook-images/overlays/additional/params.env


      #     # Updates odh-pytorch-gpu-notebook-image-n
      #     img_pt_n=$(cat jupyterhub/notebook-images/overlays/additional/params.env | grep -E "odh-pytorch-gpu-notebook-image-n=" | cut -d '=' -f2)
      #     registry_pt_n=$(echo $img_pt_n | cut -d '@' -f1)
      #     echo $registry_pt_n

      #     regex_pt_n="v2-${{ inputs.release-n }}-\d{8}+-${{ steps.hash.outputs.HASH }}"
      #     echo $regex_pt_n

      #     latest_tag_pt_n=$(skopeo inspect docker://$img_pt_n | jq -r --arg regex_pt_n "$regex_pt_n" '.RepoTags | map(select(. | test($regex_pt_n))) | .[0]')
      #     digest_pt_n=$(skopeo inspect docker://$registry_pt_n:$latest_tag_pt_n | jq .Digest | tr -d '"')
      #     output_pt_n=$registry_pt_n@$digest_pt_n
      #     echo $output_pt_n

      #     sed -i "s|^odh-pytorch-gpu-notebook-image-n=.*|odh-pytorch-gpu-notebook-image-n=$output_pt_n|" jupyterhub/notebook-images/overlays/additional/params.env

      #     # Updates odh-generic-data-science-notebook-image-n
      #     img_ds_n=$(cat jupyterhub/notebook-images/overlays/additional/params.env | grep -E "odh-generic-data-science-notebook-image-n=" | cut -d '=' -f2)
      #     registry_ds_n=$(echo $img_ds_n | cut -d '@' -f1)
      #     echo $registry_ds_n

      #     regex_ds_n="v2-${{ inputs.release-n }}-\d{8}+-${{ steps.hash.outputs.HASH }}"
      #     echo $regex_ds_n

      #     latest_tag_ds_n=$(skopeo inspect docker://$img_ds_n | jq -r --arg regex_ds_n "$regex_ds_n" '.RepoTags | map(select(. | test($regex_ds_n))) | .[0]')
      #     digest_ds_n=$(skopeo inspect docker://$registry_ds_n:$latest_tag_ds_n | jq .Digest | tr -d '"')
      #     output_ds_n=$registry_ds_n@$digest_ds_n
      #     echo $output_ds_n

      #     sed -i "s|^odh-generic-data-science-notebook-image-n=.*|odh-generic-data-science-notebook-image-n=$output_ds_n|" jupyterhub/notebook-images/overlays/additional/params.env

      #     # Updates odh-tensorflow-gpu-notebook-image-n
      #     img_tf_n=$(cat jupyterhub/notebook-images/overlays/additional/params.env | grep -E "odh-tensorflow-gpu-notebook-image-n=" | cut -d '=' -f2)
      #     registry_tf_n=$(echo $img_tf_n | cut -d '@' -f1)
      #     echo $registry_tf_n

      #     regex_tf_n="cuda-[a-z]+-tensorflow-[a-z0-9]+-[a-z]+-3.9-${{ inputs.release-n }}-\d{8}-${{ steps.hash.outputs.HASH }}"
      #     echo $regex_tf_n

      #     latest_tag_tf_n=$(skopeo inspect docker://$img_tf_n | jq -r --arg regex_tf_n "$regex_tf_n" '.RepoTags | map(select(. | test($regex_tf_n))) | .[0]')
      #     digest_tf_n=$(skopeo inspect docker://$registry_tf_n:$latest_tag_tf_n | jq .Digest | tr -d '"')
      #     output_tf_n=$registry_tf_n@$digest_tf_n
      #     echo $output_tf_n

      #     sed -i "s|^odh-tensorflow-gpu-notebook-image-n=.*|odh-tensorflow-gpu-notebook-image-n=$output_tf_n|" jupyterhub/notebook-images/overlays/additional/params.env

      #     # Updates odh-trustyai-notebook-image-n
      #     img_trai_n=$(cat jupyterhub/notebook-images/overlays/additional/params.env | grep -E "odh-trustyai-notebook-image-n=" | cut -d '=' -f2)
      #     registry_trai_n=$(echo $img_trai_n | cut -d '@' -f1)
      #     echo $registry_trai_n

      #     regex_trai_n="v1-${{ inputs.release-n }}-\d{8}+-${{ steps.hash.outputs.HASH }}"
      #     echo $regex_trai_n

      #     latest_tag_trai_n=$(skopeo inspect docker://$img_trai_n | jq -r --arg regex_trai_n "$regex_trai_n" '.RepoTags | map(select(. | test($regex_trai_n))) | .[0]')
      #     digest_trai_n=$(skopeo inspect docker://$registry_trai_n:$latest_tag_trai_n | jq .Digest | tr -d '"')
      #     output_trai_n=$registry_trai_n@$digest_trai_n
      #     echo $output_trai_n

      #     sed -i "s|^odh-trustyai-notebook-image-n=.*|odh-trustyai-notebook-image-n=$output_trai_n|" jupyterhub/notebook-images/overlays/additional/params.env



      #     # Fetch, pull, add, and commit the changes into the digest-updater branch
      #     git fetch origin digest-updater && git pull origin digest-updater && git add jupyterhub/notebook-images/overlays/additional/params.env && git commit -m "Update file via digest-updater GitHub action" && git push origin digest-updater


  open-pull-request:
    needs: [ update-n-version ]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
      - name: pull-request
        uses: repo-sync/pull-request@v2
        with:
          source_branch: digest-updater
          destination_branch: ${{ inputs.branch }}
          github_token: ${{ secrets.GH_ACCESS_TOKEN }}
          pr_label: "automated pr"
          pr_title: "[Digest Updater Action] Update notebook's imageStreams image tag to digest format"
          pr_body: |
            :crown: *This is a automated PR*

            _Created by `/.github/workflows/digest-updater.yaml`


