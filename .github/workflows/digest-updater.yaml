# name: Image Stream Updater. 
# on:
#   workflow_dispatch:  # for manual trigger workflow from GH Web UI
#     inputs:
#       hash:
#         required: true
#         description: "Provide Git Hash (Check out the commit generated from the github-actions[bot]: https://github.com/opendatahub-io/notebooks)"
#       branch:
#         required: true
#         description: "Provide release branch name"
# jobs:
#   modify-yaml-file:
#     runs-on: ubuntu-latest
#     permissions:
#       # Give the default GITHUB_TOKEN write permission to commit and push the
#       # added or changed files to the repository.
#       contents: write

#     steps:
#       # Get the git hash provided by the user. He may find it in this link: https://github.com/opendatahub-io/notebooks/commits/2023a
#       # The user should pick the commit generated from the github-actions[bot]
#       - name: Get git-hash
#         if: github.event.inputs.hash != ''
#         run: echo "Git hash ${{ inputs.hash }}"

#       # Get the release branch, is the branch will apply the changes
#       - name: Get release branch
#         if: github.event.inputs.branch != ''
#         run: echo "Release branch name ${{ inputs.branch }}"
        
#       - name: Configure Git
#         run: |
#          git config --global user.email "github-actions[bot]@users.noreply.github.com"
#          git config --global user.name "GitHub Actions"

#       - name: Install Skopeo CLI
#         shell: bash
#         run: |
#           sudo apt-get -y update
#           sudo apt-get -y install skopeo

#       - name: Checkout main to fetch the image ref
#         uses: actions/checkout@v3
#         with:
#           ref: main

#       # Feches from .spec.tags[0].from.name
#       - name: Fetch Name Image from Main Branch Image Stream (Minimal Step 1)
#         shell: bash
#         id: img_name1
#         run: |
#          echo "img_name1=$(yq '.spec.tags[0].from.name' notebook-images/base/jupyter-minimal-notebook-imagestream.yaml | sed 's/\"/\//g')" >> ${GITHUB_OUTPUT}

#       # Checkout code from the release branch to apply the updates
#       - name: Checkout branch
#         uses: actions/checkout@v3
#         with:
#           ref: ${{ inputs.branch }}

#       # It will return the latest weekly in year index format: ex: jupyter-minimal-ubi9-python-3.9-2023a-20230327-267797c to use it on the next step
#       - name: Fetch the Latest Weekly Tag Name According to the Git-Hash Commit (Minimal Step 2)
#         shell: bash
#         id: latest_tag1
#         env:
#           IMG_NAME1: ${{ steps.img_name1.outputs.img_name1 }}
#         run: |
#          echo "latest_tag1=$(skopeo inspect docker://${{ env.IMG_NAME1 }} | jq .RepoTags | grep -E jupyter-minimal-ubi9-python-3\.9-2023a-\[0-9]+-${{ inputs.hash }} | head -n 1 | sed 's/[,"[:space:]]//g')" >> ${GITHUB_OUTPUT}

#       # Using the tag from the above step returns the result in digest format
#       - name: Return The Result in Digest Format (Minimal Step 3)
#         shell: bash
#         id: digest1
#         env:
#           LATEST_TAG1: ${{ steps.latest_tag1.outputs.latest_tag1 }}
#         run: |
#          echo digest1=$(skopeo inspect docker://quay.io/opendatahub/workbench-images:${{ env.LATEST_TAG1}} | jq .Digest | sed 's/sha256/quay.io\/opendatahub\/workbench-images@sha256/g') >> ${GITHUB_OUTPUT}

#       # Populate the Image Stream With The Digest Format and Commit the Changes
#       - name: Populate the Image Stream With The Digest Format and Commit the Changes (Minimal Step 4)
#         shell: bash
#         env:
#           DIGEST1: ${{ steps.digest1.outputs.digest1 }}
#         run: |
#          yq e '.spec.tags[0].from.name = "'"$(echo ${{ env.DIGEST1}})"'"' -i notebook-images/base/jupyter-minimal-notebook-imagestream.yaml
#          git fetch origin ${{ inputs.branch }}
#          git add notebook-images/base/jupyter-minimal-notebook-imagestream.yaml
#          git commit -m "Update file"
#          git push origin ${{ inputs.branch }}


###################### second shorter way 

# on:
#   workflow_dispatch:
#     inputs:
#       hash:
#         required: true
#         description: "Provide Git Hash (Check out the commit generated from the github-actions[bot]: https://github.com/opendatahub-io/notebooks)"
#       branch:
#         required: true
#         description: "Provide release branch name"

# jobs:
#   modify-yaml-file:
#     runs-on: ubuntu-latest
#     permissions:
#       contents: write

#     steps:
#       - name: Configure Git
#         run: |
#          git config --global user.email "github-actions[bot]@users.noreply.github.com"
#          git config --global user.name "GitHub Actions"

#       - name: Install Skopeo CLI
#         shell: bash
#         run: |
#           sudo apt-get -y update
#           sudo apt-get -y install skopeo


#       # Step 3 
#       - name: Checkout main to fetch the image ref
#         uses: actions/checkout@v3
#         with:
#           ref: main

# #       # Fetches from .spec.tags[0].from.name
#       - name: Fetch Name Image from Main Branch Image Stream (Minimal Step 1)
#         shell: bash
#         id: img_name
#         run: |
#          echo "img_name=$(yq '.spec.tags[0].from.name' notebook-images/base/jupyter-minimal-notebook-imagestream.yaml | sed 's/\"/\//g')" >> ${GITHUB_OUTPUT}

#       - name: Checkout main to fetch the image ref
#         uses: actions/checkout@v3
#         with:
#           ref:  ${{ inputs.branch }}

#       - name: Fetch image name, latest weekly tag name, and image digest
#         shell: bash
#         env: 
#          IMG_NAME: ${{ steps.img_name.outputs.img_name }}
#         run: |
#           latest_tag=$(skopeo inspect docker://${{ env.IMG_NAME }} | jq -r --arg hash ${{ inputs.hash }} '.RepoTags | map(select(. | test("jupyter-minimal-ubi9-python-3\\.9-2023a-\\d+-${{ inputs.hash }}"))) | .[0]')
#           digest=$(skopeo inspect docker://quay.io/opendatahub/workbench-images:$latest_tag |  jq .Digest | sed 's/sha256/quay.io\/opendatahub\/workbench-images@sha256/g')
#           digest=$(echo "$digest" | tr -d '"' | tr -d '\\')
#           yq e '.spec.tags[0].from.name = "'$digest'"' -i notebook-images/base/jupyter-minimal-notebook-imagestream.yaml
#           git fetch origin ${{ inputs.branch }}
#           git add notebook-images/base/jupyter-minimal-notebook-imagestream.yaml
#           git commit -m "Update file"
#           git push origin ${{ inputs.branch }}


################### Loop trial working 50%



# on:
#   workflow_dispatch:
#     inputs:
#       hash:
#         required: true
#         description: "Provide Git Hash (Check out the commit generated from the github-actions[bot]: https://github.com/opendatahub-io/notebooks)"
#       branch:
#         required: true
#         description: "Provide release branch name"

# jobs:
#   modify-yaml-file:
#     runs-on: ubuntu-latest
#     permissions:
#       contents: write

#     steps:
#       - name: Configure Git
#         run: |
#          git config --global user.email "github-actions[bot]@users.noreply.github.com"
#          git config --global user.name "GitHub Actions"

#       - name: Install Skopeo CLI
#         shell: bash
#         run: |
#           sudo apt-get -y update
#           sudo apt-get -y install skopeo

#       - name: Checkout main to fetch the image ref
#         uses: actions/checkout@v3
#         with:
#           ref: main
#       # # Fetches from .spec.tags[0].from.name
#       # - name: Fetch Name Image from Main Branch Image Stream (Step 1)
#       #   shell: bash
#       #   id: img_name
#       #   run: |
#       #    echo "img_name=$(yq '.spec.tags[0].from.name' notebook-images/base/jupyter-datascience-notebook-imagestream.yaml | sed 's/\"/\//g')" >> ${GITHUB_OUTPUT}
#       # - name: Checkout main to fetch the image ref
#       #   uses: actions/checkout@v3
#       #   with:
#       #     ref:  ${{ inputs.branch }}
#       # - name: Fetch image name, latest weekly tag name, and image digest (Step 2)
#       #   run: |
#       #     img_name=${{ steps.img_name.outputs.img_name }}
#       #     src_tag=$(echo "$img_name" | sed 's/-2023a.*//')
#       #     regex="$src_tag-2023a-\\d+-${{ inputs.hash }}"
#       #     latest_tag=$(skopeo inspect docker://quay.io/opendatahub/workbench-images:"$src_tag-2023a-weekly" | jq -r --arg regex "$regex" '.RepoTags | map(select(. | test($regex))) | .[0]')
#       #     digest=$(skopeo inspect "docker://$img_name" | jq -r '.Digest')
#       #     yq eval '.spec.tags[0].from.name = "'quay.io/opendatahub/workbench-images@$digest'"' -i notebook-images/base/jupyter-datascience-notebook-imagestream.yaml
#       #     git fetch origin ${{ inputs.branch }} && git add notebook-images/base/jupyter-datascience-notebook-imagestream.yaml && git commit -m "Update file" && git push origin ${{ inputs.branch }}

#       # Loop over YAML files in notebook-images/base/ directory
#       - name: Loop over YAML files
#         id: loop
#         run: |
#           for file in notebook-images/base/*.yaml
#           do
#             git fetch --all 
#             git pull --all 
#             img_name=$(yq '.spec.tags[0].from.name' $file | sed 's/\"/\//g')
#             git checkout origin release
#             echo "img_name=$img_name" >> ${GITHUB_OUTPUT}
#             src_tag=$(echo "$img_name" | sed 's/-2023a.*//')
#             regex="$src_tag-2023a-\\d+-${{ inputs.hash }}"
#             latest_tag=$(skopeo inspect docker://"$src_tag-2023a-weekly" | jq -r --arg regex "$regex" '.RepoTags | map(select(. | test($regex))) | .[0]')
#             digest=$(skopeo inspect "docker://$img_name" | jq -r '.Digest')
#             yq eval '.spec.tags[0].from.name = "'quay.io/opendatahub/workbench-images@$digest'"' -i $file
#             git add $file && git commit -m "Update $file" $$ git push origin release
#             git checkout origin main
#           done

      # - name: add and push to release
      #   uses: EndBug/add-and-commit@v9
      #   with:
      #     default_author: github_actions
      #     new_branch: ${{ inputs.branch }}
      #     message: 'Your commit message'


####################### working example

# on:
#   workflow_dispatch:
#     inputs:
#       branch:
#         required: true
#         description: "Provide release branch name that you want to update the digests"
#       notebooks_release:
#         required: true
#         description: "Provide notebook release ex:2023a"

# jobs:
#   update-yaml:
#     runs-on: ubuntu-latest
#     permissions:
#       contents: write

#     steps:
#       - name: Configure Git
#         run: |
#          git config --global user.email "github-actions[bot]@users.noreply.github.com"
#          git config --global user.name "GitHub Actions"

#       - name: Install Skopeo CLI
#         shell: bash
#         run: |
#           sudo apt-get -y update
#           sudo apt-get -y install skopeo

#       - name: Checkout upstream notebooks repo
#         uses: actions/checkout@v3
#         with:
#          repository: opendatahub-io/notebooks.git
#          ref: 2023a

#       - name: Retrive latest weekly commit hash from the release branch
#         id: hash
#         shell: bash
#         run: |
#           echo "hash=$(git rev-parse --short HEAD)" >> ${GITHUB_OUTPUT}

#      # Updates yaml files

#       - name: Checkout main from the odh-manifest repo
#         uses: actions/checkout@v3
#         with:
#           ref: main

#       - name: Fetch Name Image from Main Branch Image Stream (Step 1)
#         shell: bash
#         id: img_name
#         run: |
#          echo "img_name=$(yq '.spec.tags[0].from.name' notebook-images/base/jupyter-minimal-notebook-imagestream.yaml | sed 's/\"/\//g')" >> ${GITHUB_OUTPUT}

#       - name: Checkout release branch
#         uses: actions/checkout@v3
#         with:
#           ref:  ${{ inputs.branch }}

#       - name: Fetch digest, and update the imagestream file (Step 2)
#         env:
#           HASH: ${{ steps.hash.outputs.hash }}
#           IMG_NAME: ${{ steps.img_name.outputs.img_name }}
#         run: |
#           notebook=$(echo ${{ env.IMG_NAME}} | cut -d':' -f2)
#           src_tag=$(echo $notebook |  sed 's/-${{ inputs.notebooks_release }}.*//')
#           regex="$src_tag-${{ inputs.notebooks_release }}-\d+-${{ env.HASH }}"
#           echo $regex

#           latest_tag=$(skopeo inspect docker://${{ env.IMG_NAME }} | jq -r --arg regex "$regex" '.RepoTags | map(select(. | test($regex))) | .[0]')
#           # latest_tag=$(skopeo inspect docker://${{ env.IMG_NAME }} | jq .RepoTags | grep -E  $src_tag-${{ inputs.notebooks_release }}-\[0-9]+-$HASH | head -n 1 | sed 's/[,"[:space:]]//g')

#           echo $latest_tag

#           digest=$(skopeo inspect docker://quay.io/opendatahub/workbench-images:$latest_tag | jq .Digest | sed 's/sha256/quay.io\/opendatahub\/workbench-images@sha256/g')
#           digest=$(echo "$digest" | tr -d '"' | tr -d '\\')
#           echo $digest

#           yq eval '.spec.tags[0].from.name = "'$digest'"' -i notebook-images/base/jupyter-minimal-notebook-imagestream.yaml
#           git fetch origin ${{ inputs.branch }} && git add notebook-images/base/jupyter-minimal-notebook-imagestream.yaml && git commit -m "Update file" && git push origin ${{ inputs.branch }}




###############################
on:
  workflow_dispatch:
    inputs:
      branch:
        required: true
        description: "Provide release branch name that you want to update the digests"
      notebooks_release:
        required: true
        description: "Provide notebook release ex:2023a"

jobs:
  initialize:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Configure Git
        run: |
         git config --global user.email "github-actions[bot]@users.noreply.github.com"
         git config --global user.name "GitHub Actions"

      - name: Install Skopeo CLI
        shell: bash
        run: |
          sudo apt-get -y update
          sudo apt-get -y install skopeo

      - name: Checkout upstream notebooks repo
        uses: actions/checkout@v3
        with:
         repository: opendatahub-io/notebooks.git
         ref: 2023a

      - name: Retrive latest weekly commit hash from the release branch
        id: hash
        shell: bash
        run: |
          echo "hash=$(git rev-parse --short HEAD)" >> ${GITHUB_OUTPUT}

  loopa:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    strategy:
      matrix:
        files: [ "notebook-images/base/jupyter-minimal-notebook-imagestream.yaml", "notebook-images/base/jupyter-datascience-notebook-imagestream.yaml", "notebook-images/base/jupyter-datascience-notebook-imagestream.yaml", "notebook-images/base/jupyter-pytorch-notebook-imagestream.yaml","notebook-images/base/jupyter-tensorflow-notebook-imagestream.yaml" ]

    steps:

      - name: test loop
        shell: bash
        run: |
         echo "running the steps for $files"

      # - name: Checkout main from the odh-manifest repo
      #   uses: actions/checkout@v3
      #   with:
      #     ref: main

      # - name: Fetch Name Image from Main Branch Image Stream (Step 1)
      #   shell: bash
      #   id: img_name
      #   run: |
      #    echo "img_name=$(yq '.spec.tags[0].from.name' $files | sed 's/\"/\//g')" >> ${GITHUB_OUTPUT}

      # - name: Checkout release branch
      #   uses: actions/checkout@v3
      #   with:
      #     ref:  ${{ inputs.branch }}

      # - name: Fetch digest, and update the imagestream file (Step 2)
      #   env:
      #     HASH: ${{ steps.hash.outputs.hash }}
      #     IMG_NAME: ${{ steps.img_name.outputs.img_name }}
      #   run: |
      #     notebook=$(echo ${{ env.IMG_NAME}} | cut -d':' -f2)
      #     src_tag=$(echo $notebook |  sed 's/-${{ inputs.notebooks_release }}.*//')
      #     regex="$src_tag-${{ inputs.notebooks_release }}-\d+-${{ env.HASH }}"
      #     echo $regex

      #     latest_tag=$(skopeo inspect docker://${{ env.IMG_NAME }} | jq -r --arg regex "$regex" '.RepoTags | map(select(. | test($regex))) | .[0]')
      #     # latest_tag=$(skopeo inspect docker://${{ env.IMG_NAME }} | jq .RepoTags | grep -E  $src_tag-${{ inputs.notebooks_release }}-\[0-9]+-$HASH | head -n 1 | sed 's/[,"[:space:]]//g')

      #     echo $latest_tag

      #     digest=$(skopeo inspect docker://quay.io/opendatahub/workbench-images:$latest_tag | jq .Digest | sed 's/sha256/quay.io\/opendatahub\/workbench-images@sha256/g')
      #     digest=$(echo "$digest" | tr -d '"' | tr -d '\\')
      #     echo $digest

      #     yq eval '.spec.tags[0].from.name = "'$digest'"' -i $files
      #     git fetch origin ${{ inputs.branch }} && git add $files && git commit -m "Update file" && git push origin ${{ inputs.branch }}


################


# my_loop_job:
#     name: loop job
#     runs-on: my-github-runners
#     strategy:
#       matrix:
#         my_variable: [ "var1", "var2", "var3" ]
        
#    steps:
#     - name: test loop
#       run: |
#           echo "running the steps for $my_variable" 
#           sh myscript.sh $





      # # Loop over YAML files in notebook-images/base/ directory
      # - name: Loop over YAML files
      #   id: loop
      #   run: |
      #     for file in notebook-images/base/*.yaml
      #     do
      #       git fetch --all 
      #       git pull --all 
      #       img_name=$(yq '.spec.tags[0].from.name' $file | sed 's/\"/\//g')
      #       git checkout origin release
      #       echo "img_name=$img_name" >> ${GITHUB_OUTPUT}
      #       src_tag=$(echo "$img_name" | sed 's/-2023a.*//')
      #       regex="$src_tag-2023a-\\d+-${{ inputs.hash }}"
      #       latest_tag=$(skopeo inspect docker://"$src_tag-2023a-weekly" | jq -r --arg regex "$regex" '.RepoTags | map(select(. | test($regex))) | .[0]')
      #       digest=$(skopeo inspect "docker://$img_name" | jq -r '.Digest')
      #       yq eval '.spec.tags[0].from.name = "'quay.io/opendatahub/workbench-images@$digest'"' -i $file
      #       git add $file && git commit -m "Update $file" $$ git push origin release
      #       git checkout origin main
      #     done



### Notes 

      # - name: Fetch image name, latest weekly tag name, and image digest
      #   shell: bash
      #   env: 
      #    IMG_NAME: ${{ steps.img_name.outputs.img_name }}
      #   run: |
      #     registry=$(echo ${{ env.IMG_NAME }}  | cut -d':' -f1)
      #     image_tag=$(echo ${{ env.IMG_NAME }}  | cut -d':' -f2)
      #     src_tag=$(echo $image_tag |  sed 's/-2023a.*//')
      #     regex="$src_tag-2023a-\\d+-${{ inputs.hash }}"
      #     latest_tag=$(skopeo inspect docker://quay.io/opendatahub/workbench-images:jupyter-minimal-ubi9-python-3.9-2023a-weekly | jq -r --arg regex "$regex" '.RepoTags | map(select(. | test($regex))) | .[0]')
      #     digest=$(skopeo inspect docker://$registry:$latest_tag |  jq .Digest | sed 's/sha256/quay.io\/opendatahub\/workbench-images@sha256/g')
      #     digest=$(echo "$digest" | tr -d '"' | tr -d '\\')
      #     yq e '.spec.tags[0].from.name = "'$digest'"' -i notebook-images/base/jupyter-datascience-notebook-imagestream.yaml
      #     git fetch origin ${{ inputs.branch }}
      #     git add notebook-images/base/jupyter-datascience-notebook-imagestream.yaml
      #     git commit -m "Update file"
      #     git push origin ${{ inputs.branch }}



####
# IMG_NAME: quay.io/opendatahub/workbench-images:jupyter-datascience-ubi9-python-3.9-2023a-weekly
#skopeo inspect docker://quay.io/opendatahub/workbench-images:jupyter-datascience-ubi9-python-3.9-2023a-weekly | jq .RepoTags | grep -E jupyter-datascience-ubi9-python-3\.9-2023a-\[0-9]+-267797c | head -n 1 | sed 's/[,"[:space:]]//g'   -> jupyter-datascience-ubi9-python-3.9-2023a-20230327-267797c


# digest=$(skopeo inspect docker://quay.io/opendatahub/workbench-images:jupyter-datascience-ubi9-python-3.9-2023a-20230327-267797c | jq .Digest | sed 's/sha256/quay.io\/opendatahub\/workbench-images@sha256/g') >> ${GITHUB_OUTPUT} -> "quay.io/opendatahub/workbench-images@sha256:033cfd66da0993235eb4f872ad21be6b7601d8479db5a3bab0633862c6686c2a"


# echo -e  "    - Generated Annotations: $str_annotations " | tr -d '\\'
# yq -i -Y '.spec.tags['$cur_pos'].annotations."opendatahub.io/notebook-python-dependencies" = "'$str_annotations'"' $file




# img_name=quay.io/opendatahub/workbench-images:jupyter-datascience-ubi9-python-3.9-2023a-weekly
# notebooks_release=2023a
# HASH=267797c
#   notebook=$(echo $img_name | cut -d':' -f2)
#   src_tag=$(echo $notebook |  sed 's/-2023a.*//')
#   regex="$src_tag-2023a-\[0-9]+-$HASH"


#   latest_tag=$(skopeo inspect docker://$img_name | jq .RepoTags | grep -E $regex | head -n 1 | sed 's/[,"[:space:]]//g')

    
#     latest_tag=$(skopeo inspect docker://$img_name | jq .RepoTags | grep -E $src_tag-$notebooks_release-\[0-9]+-$HASH | head -n 1 | sed 's/[,"[:space:]]//g')



# skopeo inspect docker://quay.io/opendatahub/workbench-images:jupyter-datascience-ubi9-python-3.9-2023a-weekly | jq .RepoTags | grep -E jupyter-datascience-ubi9-python-3\.9-2023a-\[0-9]+-267797c | head -n 1 | sed 's/[,"[:space:]]//g'








