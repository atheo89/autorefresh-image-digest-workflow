# The aim of this GitHub workflow is to update the .spec.tags[0].from.name field of each Notebook's ImageStreams into Digest format, when cut off a new release (The odh-manifest release branch should exist). 
# The format of the digest that would be assing has the following format: quay.io/opendatahub/workbench-images@sha256:xxx...xxx
on:
  workflow_dispatch:
    inputs:
      branch:
        required: true
        description: "Provide release branch"
jobs:
  initialize:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Install Skopeo CLI
        shell: bash
        run: |
          sudo apt-get -y update
          sudo apt-get -y install skopeo
      
      # Checkout the release branch 
      - name: Checkout release branch
        uses: actions/checkout@v3
        with:
          ref:  ${{ inputs.branch }}

      # Create a new branch
      - name: Create a new branch
        run: |
         git fetch origin ${{ inputs.branch }} && git pull origin ${{ inputs.branch}} && git checkout -b digest-updater

  update-n-version:
    needs: [ initialize ]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    strategy:
      max-parallel: 1
      matrix:
        files: [ "notebook-images/base/jupyter-minimal-notebook-imagestream.yaml", "notebook-images/base/jupyter-datascience-notebook-imagestream.yaml", "notebook-images/base/jupyter-minimal-gpu-notebook-imagestream.yaml" , "notebook-images/base/jupyter-pytorch-notebook-imagestream.yaml","notebook-images/base/jupyter-tensorflow-notebook-imagestream.yaml" ]

    steps:
      - name: Configure Git
        run: |
         git config --global user.email "github-actions[bot]@users.noreply.github.com"
         git config --global user.name "GitHub Actions"

      # Get the latest weekly build commit hash: https://github.com/opendatahub-io/notebooks/commits/2023a
      - name: Checkout upstream notebooks repo
        uses: actions/checkout@v3
        with:
         repository: opendatahub-io/notebooks.git
         ref: 2023a
      - name: Retrive latest weekly commit hash from the release branch
        id: hash
        shell: bash
        run: |
          echo "HASH=$(git rev-parse --short HEAD)" >> ${GITHUB_OUTPUT}

      - name: Checkout main from the odh-manifest repo
        uses: actions/checkout@v3
        with:
          ref: main
      # Get image name from: .spec.tags[0].from.name
      - name: Fetch the name of the image from Image Stream (Step 1)
        shell: bash
        id: img_name
        run: |
         echo "img_name=$(yq '.spec.tags[0].from.name' ${{ matrix.files }} | sed 's/\"/\//g')" >> ${GITHUB_OUTPUT}

      # Checkout the release branch to apply the updates
      - name: Checkout release branch
        uses: actions/checkout@v3
        with:
          ref:  ${{ inputs.branch }}

      - name: Fetch digest, and update the imagestream file (Step 2)
        env:
          IMG_NAME: ${{ steps.img_name.outputs.img_name }}
        run: |
          src_tag=$(echo "${{ env.IMG_NAME }}" | sed 's/-weekly.*//' | cut -d':' -f2 | tr -d '"')
          regex="$src_tag-\d+-${{ steps.hash.outputs.HASH }}"
          echo $regex

          # Get the latest tag: output ex. latest_tag=jupyter-minimal-ubi9-python-3.9-2023a-20230403-cf92364
          latest_tag=$(skopeo inspect docker://${{ env.IMG_NAME }} | jq -r --arg regex "$regex" '.RepoTags | map(select(. | test($regex))) | .[0]')
          echo $latest_tag

          #Fetch the latest tag in Digest format: ex.digest=quay.io/opendatahub/workbench-images@sha256:xxx...xxx
          digest=$(skopeo inspect docker://quay.io/opendatahub/workbench-images:$latest_tag | jq .Digest | sed 's/sha256/quay.io\/opendatahub\/workbench-images@sha256/g')
          digest=$(echo "$digest" | tr -d '"' | tr -d '\\')
          echo $digest

          # Update the .spec.tags[0].from.name field on the release image stream with the digest outputed digest
          yq eval '.spec.tags[0].from.name = "'$digest'"' -i ${{ matrix.files }}

          # Fetch, pull, add, and commit the changes into the release branch
          #git fetch origin ${{ inputs.branch }} && git pull origin ${{ inputs.branch}} && git add ${{ matrix.files }} && git commit -m "Update file ${{ matrix.files }} via digest-updater GitHub action" && git push origin ${{ inputs.branch }}

          git fetch origin digest-updater && git pull origin digest-updater && git add ${{ matrix.files }} && git commit -m "Update file ${{ matrix.files }} via digest-updater GitHub action" 


  open-pull-request:
    needs: [ update-n-version ]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v5



      #         - uses: actions/checkout@v3
      # - name: Create commits
      #   run: |
      #     git config user.name 'Peter Evans'
      #     git config user.email 'peter-evans@users.noreply.github.com'
      #     date +%s > report.txt
      #     git commit -am "Modify tracked file during workflow"
      #     date +%s > new-report.txt
      #     git add -A
      #     git commit -m "Add untracked file during workflow"
      # - name: Uncommitted change
      #   run: date +%s > report.txt
      # - name: Create Pull Request
      #   uses: peter-evans/create-pull-request@v5




